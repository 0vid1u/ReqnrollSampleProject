{
  "uuid": "c0b06653-1216-4ed6-a7bb-76e947df7f0a",
  "historyId": "ef5d4642164f6566c612c66ade5b92b5",
  "testCaseId": "0388e55caa0dc0ea9d745417f78e6b3f",
  "fullName": "ReqnrollSampleProject/Features/Calculator/Add two numbers",
  "labels": [
    {
      "name": "host",
      "value": "EN411200"
    },
    {
      "name": "thread",
      "value": "14"
    },
    {
      "name": "language",
      "value": "C#"
    },
    {
      "name": "framework",
      "value": "Reqnroll"
    },
    {
      "name": "package",
      "value": "Features.Calculator"
    },
    {
      "name": "feature",
      "value": "Calculator"
    },
    {
      "name": "tag",
      "value": "mytag"
    }
  ],
  "links": [],
  "name": "Add two numbers",
  "status": "broken",
  "statusDetails": {
    "known": false,
    "muted": false,
    "flaky": false,
    "message": "The requested service 'ReqnrollSampleProject.Steps.Hooks' has not been registered. To avoid this exception, either register a component to provide the service, check for service registration using IsRegistered(), or use the ResolveOptional() method to resolve an optional dependency.",
    "trace": "Autofac.Core.Registration.ComponentNotRegisteredException: The requested service 'ReqnrollSampleProject.Steps.Hooks' has not been registered. To avoid this exception, either register a component to provide the service, check for service registration using IsRegistered(), or use the ResolveOptional() method to resolve an optional dependency.\r\n   at Autofac.ResolutionExtensions.ResolveService(IComponentContext context, Service service, IEnumerable`1 parameters)\r\n   at Autofac.ResolutionExtensions.Resolve(IComponentContext context, Type serviceType, IEnumerable`1 parameters)\r\n   at Autofac.ResolutionExtensions.Resolve(IComponentContext context, Type serviceType)\r\n   at Reqnroll.Autofac.AutofacTestObjectResolver.ResolveBindingInstance(Type bindingType, IObjectContainer container)\r\n   at Reqnroll.ScenarioContext.GetBindingInstance(Type bindingType)\r\n   at lambda_method65(Closure, IContextManager)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)\r\n--- End of stack trace from previous location ---\r\n   at Reqnroll.Bindings.BindingInvoker.InvokeBindingAsync(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, DurationHolder durationHolder)\r\n   at Reqnroll.Infrastructure.TestExecutionEngine.InvokeHookAsync(IAsyncBindingInvoker invoker, IHookBinding hookBinding, HookType hookType)\r\n   at Reqnroll.Infrastructure.TestExecutionEngine.FireEventsAsync(HookType hookType)\r\n   at Reqnroll.Infrastructure.TestExecutionEngine.FireEventsAsync(HookType hookType)\r\n   at Reqnroll.Infrastructure.TestExecutionEngine.FireScenarioEventsAsync(HookType bindingEvent)\r\n   at Reqnroll.Infrastructure.TestExecutionEngine.OnScenarioStartAsync()\r\n   at Reqnroll.Infrastructure.TestExecutionEngine.OnAfterLastStepAsync()\r\n   at Reqnroll.TestRunner.CollectScenarioErrorsAsync()\r\n   at Allure.ReqnrollPlugin.SelectiveRun.TestPlanAwareTestRunner.CollectScenarioErrorsAsync()\r\n   at ReqnrollSampleProject.Features.CalculatorFeature.ScenarioCleanupAsync()\r\n   at ReqnrollSampleProject.Features.CalculatorFeature.AddTwoNumbers() in C:\\dev\\dojo\\c#\\ReqnrollSampleProject\\ReqnrollSampleProject\\Features\\Calculator.feature:line 12\r\n   at NUnit.Framework.Internal.TaskAwaitAdapter.GenericAdapter`1.GetResult()\r\n   at NUnit.Framework.Internal.AsyncToSyncAdapter.Await(Func`1 invoke)\r\n   at NUnit.Framework.Internal.Commands.TestMethodCommand.RunTestMethod(TestExecutionContext context)\r\n   at NUnit.Framework.Internal.Commands.TestMethodCommand.Execute(TestExecutionContext context)\r\n   at NUnit.Framework.Internal.Commands.BeforeAndAfterTestCommand.<>c__DisplayClass1_0.<Execute>b__0()\r\n   at NUnit.Framework.Internal.Commands.DelegatingTestCommand.RunTestMethodInThreadAbortSafeZone(TestExecutionContext context, Action action)"
  },
  "stage": "finished",
  "steps": [
    {
      "name": "Given the first number is 50",
      "status": "skipped",
      "statusDetails": {
        "known": false,
        "muted": false,
        "flaky": false
      },
      "stage": "finished",
      "steps": [],
      "attachments": [],
      "parameters": [],
      "start": 1730462566687,
      "stop": 1730462566713
    },
    {
      "name": "Given the second number is 70",
      "status": "skipped",
      "statusDetails": {
        "known": false,
        "muted": false,
        "flaky": false
      },
      "stage": "finished",
      "steps": [],
      "attachments": [],
      "parameters": [],
      "start": 1730462566717,
      "stop": 1730462566717
    },
    {
      "name": "When the two numbers are added",
      "status": "skipped",
      "statusDetails": {
        "known": false,
        "muted": false,
        "flaky": false
      },
      "stage": "finished",
      "steps": [],
      "attachments": [],
      "parameters": [],
      "start": 1730462566719,
      "stop": 1730462566720
    },
    {
      "name": "Then the result should be 120",
      "status": "skipped",
      "statusDetails": {
        "known": false,
        "muted": false,
        "flaky": false
      },
      "stage": "finished",
      "steps": [],
      "attachments": [],
      "parameters": [],
      "start": 1730462566721,
      "stop": 1730462566722
    }
  ],
  "attachments": [],
  "parameters": [],
  "start": 1730462566679,
  "stop": 1730462566869
}